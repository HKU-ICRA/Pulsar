import os
import numpy as np

from rmleague.player import Player
from rmleague.historical import Historical
from rmleague.agent import Agent
from rmleague.player_utils import pfsp


class MainExploiter(Player):

  def __init__(self, agent, payoff, name, checkpoint_steps):
    self.agent = Agent(agent.get_weights())
    self._initial_weights = self.agent.get_weights()
    self._payoff = payoff
    self.name = name
    self._checkpoint_step = 0
    self.updates = 0
    self.checkpoint_steps = checkpoint_steps

  def get_match(self):
    from rmleague.main_player import MainPlayer
    main_agents = [
        player for player in self._payoff.players
        if isinstance(player, MainPlayer)
    ]
    opponent = np.random.choice(main_agents)

    if self._payoff[self, opponent] > 0.1:
      return opponent, True

    historical = [
        player for player in self._payoff.players
        if isinstance(player, Historical) and player.parent == opponent
    ]
    win_rates = self._payoff[self, historical]

    return np.random.choice(
        historical, p=pfsp(win_rates, weighting="variance")), True

  def checkpoint(self):
    self.agent.set_weights(self._initial_weights)
    self._checkpoint_step = self.agent.get_steps()
    return self._create_checkpoint()

  def ready_to_checkpoint(self):
    from rmleague.main_player import MainPlayer
    steps_passed = self.agent.get_steps() - self._checkpoint_step
    if steps_passed < self.checkpoint_steps:
      return False

    main_agents = [
        player for player in self._payoff.players
        if isinstance(player, MainPlayer)
    ]
    win_rates = self._payoff[self, main_agents]
    return win_rates.min() > 0.7 or steps_passed > self.checkpoint_steps
  
  def get_agent(self):
    return self.agent
  
  def set_agent(self, agent):
    self.agent = agent

  def get_weights(self):
    return self.agent.get_weights()

  def set_ckpt_steps(self, new_checkpoint_steps):
    self.checkpoint_steps = new_checkpoint_steps

  @property
  def agent_file(self):
    return self.agent.agent_file
  
  def get_name(self):
    return self.name

  def incre_updates(self):
    self.updates += 1
  
  def get_updates(self):
    return self.updates
